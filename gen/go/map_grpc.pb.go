// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: map.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Map_GetRegions_FullMethodName   = "/map.Map/GetRegions"
	Map_GetCities_FullMethodName    = "/map.Map/GetCities"
	Map_GetDistricts_FullMethodName = "/map.Map/GetDistricts"
	Map_GetMarks_FullMethodName     = "/map.Map/GetMarks"
	Map_AddMark_FullMethodName      = "/map.Map/AddMark"
)

// MapClient is the client API for Map service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapClient interface {
	GetRegions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRegionsResponse, error)
	GetCities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCitiesResponse, error)
	GetDistricts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDistrictsResponse, error)
	GetMarks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMarksResponse, error)
	AddMark(ctx context.Context, in *AddMarkRequest, opts ...grpc.CallOption) (*AddMarkResponse, error)
}

type mapClient struct {
	cc grpc.ClientConnInterface
}

func NewMapClient(cc grpc.ClientConnInterface) MapClient {
	return &mapClient{cc}
}

func (c *mapClient) GetRegions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, Map_GetRegions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) GetCities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCitiesResponse)
	err := c.cc.Invoke(ctx, Map_GetCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) GetDistricts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDistrictsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDistrictsResponse)
	err := c.cc.Invoke(ctx, Map_GetDistricts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) GetMarks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMarksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMarksResponse)
	err := c.cc.Invoke(ctx, Map_GetMarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) AddMark(ctx context.Context, in *AddMarkRequest, opts ...grpc.CallOption) (*AddMarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMarkResponse)
	err := c.cc.Invoke(ctx, Map_AddMark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapServer is the server API for Map service.
// All implementations must embed UnimplementedMapServer
// for forward compatibility.
type MapServer interface {
	GetRegions(context.Context, *emptypb.Empty) (*GetRegionsResponse, error)
	GetCities(context.Context, *emptypb.Empty) (*GetCitiesResponse, error)
	GetDistricts(context.Context, *emptypb.Empty) (*GetDistrictsResponse, error)
	GetMarks(context.Context, *emptypb.Empty) (*GetMarksResponse, error)
	AddMark(context.Context, *AddMarkRequest) (*AddMarkResponse, error)
	mustEmbedUnimplementedMapServer()
}

// UnimplementedMapServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMapServer struct{}

func (UnimplementedMapServer) GetRegions(context.Context, *emptypb.Empty) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (UnimplementedMapServer) GetCities(context.Context, *emptypb.Empty) (*GetCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCities not implemented")
}
func (UnimplementedMapServer) GetDistricts(context.Context, *emptypb.Empty) (*GetDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistricts not implemented")
}
func (UnimplementedMapServer) GetMarks(context.Context, *emptypb.Empty) (*GetMarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarks not implemented")
}
func (UnimplementedMapServer) AddMark(context.Context, *AddMarkRequest) (*AddMarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMark not implemented")
}
func (UnimplementedMapServer) mustEmbedUnimplementedMapServer() {}
func (UnimplementedMapServer) testEmbeddedByValue()             {}

// UnsafeMapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapServer will
// result in compilation errors.
type UnsafeMapServer interface {
	mustEmbedUnimplementedMapServer()
}

func RegisterMapServer(s grpc.ServiceRegistrar, srv MapServer) {
	// If the following call pancis, it indicates UnimplementedMapServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Map_ServiceDesc, srv)
}

func _Map_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Map_GetRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).GetRegions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_GetCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).GetCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Map_GetCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).GetCities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_GetDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).GetDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Map_GetDistricts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).GetDistricts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_GetMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).GetMarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Map_GetMarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).GetMarks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_AddMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).AddMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Map_AddMark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).AddMark(ctx, req.(*AddMarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Map_ServiceDesc is the grpc.ServiceDesc for Map service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Map_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "map.Map",
	HandlerType: (*MapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegions",
			Handler:    _Map_GetRegions_Handler,
		},
		{
			MethodName: "GetCities",
			Handler:    _Map_GetCities_Handler,
		},
		{
			MethodName: "GetDistricts",
			Handler:    _Map_GetDistricts_Handler,
		},
		{
			MethodName: "GetMarks",
			Handler:    _Map_GetMarks_Handler,
		},
		{
			MethodName: "AddMark",
			Handler:    _Map_AddMark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "map.proto",
}
